/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Exchange.Matching.server;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.concurrent.*;

import javax.xml.parsers.*;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

class Task implements Runnable {
    private DataInputStream Trans;
    private Proxy proxy;
    private Messenger messenger;
    String response;

    public Task(Messenger messenger,db stockDB) throws UnknownHostException, IOException {
        this.messenger=messenger;
        proxy=new Proxy(stockDB,messenger);

    }

    public void send() throws Exception {
        try {
            int len=response.length();
            messenger.send(Integer.toString(len)+"\n");
            messenger.send(response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            String data=(String)messenger.recv();

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader(data)));
            switch (doc.getFirstChild().getNodeName()) {
                case "create":
                    response=proxy.create_parse(doc.getFirstChild());
                    break;
                case "transactions":
                    response=proxy.transactions_parse(doc.getFirstChild());
                    break;
            }
            //System.out.println("finish generate response");
            send();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                messenger.closeMessenger();
                Trans.close();
            } catch (Exception e) {

            }
        }
    }
}